# distributed systems lesson 2

how to distribute work of database?
- want to scale out DB, first need to attack the reads to db.
reads vs updates
- easier to handle reads than to handle updates
- most apps read heavy, few updates.
- if we have a solution that handles lots of reads, but doesn't improve writes, could still be ok.
- can make multiple copies of db on multiple machines as well.
  - leader follower, master-slave

unlike rails app, data will be changing because of udpates, we need to make one of the 3 machines special, leader will take all **the writes**
- this allows the leader to tell the followers to update when needed.
- reads can go to any of the tree.
- doesn't solve write issues, and doesn't solve having more data than 1 machine can store.

- writes come into leader, and followers need to change with leader to maintain same data to all dbs.
- leader forwards them onto followers, 
  1. leader can forward immediately to followers and wait for followers to confirm that they've made the change, then rails can be told that all machiens are ready. **synchronous replication**
  2. as soon as leader updates itself, can tell rails application it updated itself, and in the background leader will update the followers **asynchronously**. 
  3. can have different shards of the db with different leaders in charge of their shard of the db.  This allows us to scale writability based on the data you are in charge of.
- having more leaders does not mean better scalability and can lead to conflict.

## Failover
- if a follower goes down, rails will realize reads aren't being performed can read from other followers/dbs as well.
- if leader goes down, no leader left, that could be a problem, could go into a read only mode for the app.

- Could be a problem with asynchronous and synchronous replication.
  - leader applies change locally, but goes down before all followers are updated. 
  - half the followers know of the transaction, but other doesn't.  If purple is new leader, all is good, but if green is promoted, and there is reconcilliation process, then green will not know that purple made the update.
- simple to choose new leader, but need to go through reconcilliation process to ensure all dbs are up to date.
- 

leader follower chain replication
- if the master needs to wait for the others to update before moving on, will add latency, vs doing them all in parallel.

## multi leader replication solutions
- locking
- reconcile conflicting histories
- fdf

## linearlizability failures
- time should always move forward in db system, shouldn't be able to read, and then read again but hit an older db.
- ok to have delay in read, not ok to have reads occur in random time order.
- need to handle it if you want to use promoted dbs. not an issue with single db.

## Partitioning: Scaling write load
- Split database so that not entire db is saved in each db.
- partitioning, sharding.
- adding new shards will mess it up
  - fix this by partitioning into many shards at th beginning.
  - won't need to reshuffle data completely.
- can also have a better partitioning scheme, extensible hashing.

Sharding can  be an issue with you need to queury multiple of them.
- can partition table by friend_id1, distributed friendships table based on friend_id1
- allows us to read friendships and cat_ids at the same time, from the same partition
- also want information about curie's friends, and names, once we get Id's we can get profiles of all the cats.
  - is a problem if curie's friends live on different partitions, all partitions will need to be queried, then result can be merged at the end, this join query is not scalable, read needs to end up everywhere, 
  - if we never do this kind of query, then it is not a problem.

## denormalization
- normalization is removing duplicates of data in the db, makes it non scalable.
- now that joins are not ok, we don't have to normalize, and will just adopt a different schema.

Users:
- id
- fname
- lname
- avatar_url

friendships:
- friend_id1
- friend_id2

friends:
- friend_id1
- friend2_fname
- friend2_lname
- friend2_avatar_url

this allows us to store data in the friends table without having to hit another db for info.
denormalizing data store by copying data from other tables.

trade-offs
- takes more memory, if number of friends is limited, will need to have 
- choice between fast read or fast write, will depend on your needs as a company.
- introduce denormalization when necessary and helpful, will have to determine by how application is being used.
- 

## internal DB access API
- don't expose db to rails app anymore
- now they make http requests to internal API that will hit DB.
- DataStore will hve routes that the Rails application can send http requests to.
- 