# Dynamic programming
Top-Down
- can calculate values as we go down the stack, storing it in the call itself, or in a local variable somewhere else.
- saving work to previous sub problems as you go.

bottom-up
- using a cache that builds up as we go
- subsequent answer is stored as you move up fib.
- **essentially, but is dynamic, saving work to previous sub problems as you go to avoid doing extra work.**

longest increasing subsequence
[1,5,2,6,10,4,20] => [1,2,6,10,20]

by knowing best one that ends in each index, we will know the best solution.  

Doing a perm in linear time is a good reason to use dynamic programming
- keep track of sub solutions
- each decision relies on relationship with subselections.

keeping track of highest possible as we move forward, looking back two away.
input:[1,5,16,20,3,7,10,5,10,25,17] = 62
maxes:[1,5,17,25,25(25 > 17+3),32, 35(25 + 10), 37, 45, 62, 62] both are highest
- as you move along, you take the record from the one that you chose.
 
 usually keep track of a cache of solutions to smaller subproblems

 We can:
 1. keep globally scoped variable
 2. pass a pointer to the cache from call to call, **passing by reference**
  - in javascript all non primitive types are passed by reference, so we could pass a hash or array
  - in ruby, everything is passed by value, meaning that when something is passed into the function, the function makes a copy of the paramenter then refers to and mutates the copy. 

  we can use a class in ruby to create instance variables that we can use as a cache, one for each dynamic programming problem.
  - will only use this method for top-down implementations
  - for bottom-up implementations, a helper function will build out and return the cache so we dont have to worry about updating it while doing the recursive calls.
    - wont want to really do this in a real life situation because you will most likely be working with classes, functional scope, or other context that allow you to create and maintain and cache in a reasonable way.

    - for whiteboarding, just create a global variable that you can refer to, but tell the interviewer about what you're doing, assuming the cache is globally scoped, and explain how you would implement it.

## Blair numbers
- b1 is 1
- b2 is 2
-kth blair number is the sum of prev 2 blair numbers plus the (k-1)th odd number

## frog steps
- 

class notes
```ruby 
  def frog_hops_bottom_up(n)
    frog_cache_builder(n)[n]
  end

  def frog_cache_builder(n)
    ways_collection = [[[]], [[1]], [[1,1], [2]]]
    return ways_collection if n < 3

    (3..n).each do |i|
      result = []
      (1..3).each do |first_step|
        ways_collection[i - first_step].each do |way|
          new_way = [first_step]

          way.each do |step|
            new_way << step
          end

          result << new_way
        end
      end
    ways_connection << result
  end
```

my method
```ruby
  def frog_hops_bottom_up(n)
    cache = frog_cache_builder(n)
    cache[n]
  end

  def frog_cache_builder(k)
    cache = { 
      1 => [[1]], 
      2=> [[1,1], [2]], 
      3 => [[1,1,1], [2,1], [1,2], [3]]
    }
    return cache if k <= 3
    (4..k).each do |n|
      result = []
      1.upto(3) do |j|
        cache[n - j].each { |res| result << (res + [j]) }
      end
      cache[n] = result
    end
    cache
  end
```

top-down

```ruby
  # class notes
  @frog_cache

  def frog_hops_top_down(n)
    frog_hops_top_down_helper(n)
  end

  def frog_hops_top_down_helper(n)
    return @froggy_cache[n] if @froggy_cache[n]

    new_ways_set = []
    (1..3).each do |first_step| 
      frog_hops_top_down(n-first_step).each do |way|
        new_way = [first_step]

        way.each do |step|
          new_way << step
        end

        new_way_set << new_way
      end
    end

    @froggy_cache[n] = new_way_set
  end



  # my method
   def frog_hops_top_down(n)
    frog_hops_top_down_helper(n)
    @frog_cache[n]
  end

  def frog_hops_top_down_helper(n)
    return @frog_cache[n] unless @frog_cache[n].nil?
    result = []
    1.upto(3) do |j|
      frog_hops_top_down(n-j).each { |res| result << (res + [j]) }
    end
    @frog_cache[n] = result
    result
  end

  # super frog

  def frog_hops_top_down_helper(n)
    ways_collection
    return @froggy_cache[n] if @froggy_cache[n]

    new_ways_set = []
    (1..3).each do |first_step| 
      frog_hops_top_down(n-first_step).each do |way|
        new_way = [first_step]

        way.each do |step|
          new_way << step
        end

        new_way_set << new_way
      end
    end

    @froggy_cache[n] = new_way_set
  end


  
```