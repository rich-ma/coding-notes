# graphs
density: E / V(V-1)
max density, closer to 1, more dense, closer to 0 more sparse

in a directed graph this changes, need to add connections both ways vs in undirected.

- need to add in In Edges, will double number of edges, n(n-1) more edges, 

## twitter
- vertices are users as well, need to be more nuances, but now instead of friendships we have followers, User A can follow B, b-> A, or b<->a
- some subgraphs might be very dense, like a family, but the entirely of twitter will be sparse.
- this is how friend algorithsm are kind of done.
- Why is density important?
  - for **algorithms**
  - for some graphs the more dense it is, time could be linear or quadratic


## Trees
Binary search tree can represent a graph
not the only kind of tree, to make a graph a tree, has **N vertices, N-1 edges.**
Will never have cycles in our graph.

**DOM is a tree as well, Document Object Model.**
- Vertices: DOM elements
- Edges: parents-children, are connected, not going to connect grandparents and children, just parent-children

```javascript
<html id='a'>
  <div id='b'>
    <ul id='c'>
      <li id='d'>hello</li>
      <li id='e'>hey</li>
      <li id='f'>yo</li>
    </ul>
  </div>
</html>
```
this would be represetned in a tree with   d
a-b-c< e
       f

- There is direction for our edges(implicit) but we don't draw it in, because that would infer that there could be a connected from child to parent, but not necessary.
- because we know relation of vertices to edges, we can calc the **density**

Density = E/N(N-1) => N-1/(N(N-1))
1/N

## Dependency set
- tasks that depend on each other
- Task A -> Task B iff b depends on a.
- ex
  - feed cat
  - laundry
  - go to target
  - atm
  - meet friend

atm before target and meet friend
need to go to target before feeding cat
need to go to target before laundry
need to do laundry before meeting friends

Directed graph, the direction is very important here, is unweighted, can add weight to show time or importance.
has no cycles in, starts at a vertex, ends at that vertex.
stuck in endless cycle, if it cycles there will be an error, something has gone wrong.
cylces should not exist in cycles here.

interview questions might:
- order graph in order of dependencies.
- topoligical sort is important to know for interviews.

## Graph implementation
- many ways to represent it
- depends on your use
- usually don't have to implement your own at work.

```ruby
class Graph
  def initialize
    @vertices = []
    @edges = []
    create_edges
  end



end

class Vertex
  def initialize(data)
    @data = data
    # @edges = [verticies] // this if undirected
    @in_edges = [vertices]
    @out_edges = [vertices]
  end
end

# class Edges
#   def initialize(A,B, weight = 1)
#     @vertices = [A,B]
#     @weight = weight
#   end
# end

```
- can store edge information in Graph class vs making an edge class

Adjacency Matrix
- represents relationships between vertices
- can also store edges within Vertex class

Day 2 notes:
1. get up
2. make bed
3. target
4. laundry
5. walk dog
6. feed cat
7. charge computer
8. send emails
9. plant fowers

dependency:
- will connect vertices if one step depends on another.
- all steps require getting up. (1-> all)
- to do laundry, need to go to target.(3-4)
- target before feed cat(3-> 6)
- charge computer before email (7 -> 8)

need an algorithm to find a correct order to do this in.

<<<<<<< HEAD
#topological sort
- first get vertices that have no in edges
  - don't depend on anything else, only 1 right now
  - first layer we do 1
- second we will cross out edges coming out of those vertex/vertices
- then look for all of the vertices with no in edges after, [2, 3, 5, 9], leaving [4,6,7,8]
- we finish the vertices and their out edges, then continue looking for things with no more in edges. [4, 6,7] 
- now 8 is the only vertex with and in edges, 7 -> 8
- remove 8
[1],[2,3,5,9], [4,6,7], [8]
- order doesn't matter within each layer, many ways to topoligically sort.

## kahn's algorithm
- most widely used alg.
1. create queue, push into it vertices with no in edges.
2. dequeue and examine vertex that dequeued and put it in a sorted array of vertices, and check all out edges and if that vertex that it goes to has no more in edges, we will enqueue it.
3. continue this process until nothing left in queue.

- vertex class should have access to edges.
- graph should have access to edges as well.
  - want to identify by looking at verticex with no in edges.
  - remove edges from graph, need to give graph class access to edges, don't need to do it, but makes it simpler.  

```ruby
def topo_sort(graph)
  sorted = []
  top = Queue.new
  graph.vertices.each do |vertex|
    if vertex.in_edges.empty?
      top.enqueue(vertex)
    end
  end

  until top.empty?
    current = top.dequeue
    sorted << current
    current.out_edges.each do |edge|
      if edge.destination.in_edge.empty?
        top.enqueue(edge.destination)
      end

      graph.delete_edge(edge)
    end
    graph.delete_vertex(current)
  end
  
  sorted
end
```
- end up being O(V) for the graph.vertices, O(E) for the until loop, O(V+E), depends on sparcity/density of graph. Could be OV, or OE, or OV^2 depending on density.

-kanh's algorithm is non determinstic, can have different result for same graph.

## other algs
- coffman graham, is deterministic
- can modify DFS

## use cases
- tasks/dependency lists
- file dependencies, like ```Webpack```, need to determine which ones to install first.
- Schedule tasks given scheduling restrictions
- minimal spanning tree
  - harder example, should look it up.
  - set of edges that minimally get to all vertices in a graph.
  - 